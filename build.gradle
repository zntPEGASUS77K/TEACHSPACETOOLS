plugins {
    id 'java'
    id 'com.github.node-gradle.node' version '7.0.2'
    id 'org.springframework.boot' version '3.2.2'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.teachspace'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}
dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:3.2.2"
    }
}
repositories {
    mavenCentral()
    gradlePluginPortal()
}

dependencies {
    // Jackson Mapper
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
    runtimeOnly 'org.postgresql:postgresql'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

node {
    version = '20.11.0'
    npmVersion = '10.2.3'
    download = true
}

task buildFrontend(type: NpmTask) {
    group = 'build'
    args = ['run', 'build']
    workingDir = file("${rootDir}/frontend")
    dependsOn npmInstall
}

task serveFrontend(type: NpmTask) {
    group = 'application'
    args = ['run', 'start']
    workingDir = file("${rootDir}/frontend")
    dependsOn npmInstall
}
